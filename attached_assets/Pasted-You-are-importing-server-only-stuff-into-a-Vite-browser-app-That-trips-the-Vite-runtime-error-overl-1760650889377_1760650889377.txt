You are importing server-only stuff into a Vite browser app. That trips the Vite runtime-error overlay.

What in your code triggers it

* `import * as fs from "fs"` is Node only. The browser has no fs.
* `import sharp from "sharp"` is Node only. It bundles native binaries. The browser cannot load those.
* `process.env.GEMINI_API_KEY` is Node. In the browser `process` is undefined unless you inject it. Your key would also leak to users.
* You are using the Google GenAI server SDK from client code. That belongs on the server.

Typical symptoms in dev tools

* “fs is not defined” or “Failed to resolve ‘fs’”
* “process is not defined”
* “sharp... failed to load” or a blank overlay that says unknown runtime error

Fix it in three steps

1. Split server from client

* Move this whole module to a server folder.
* Expose two endpoints: POST `/api/story` and POST `/api/image`.
* Call Gemini, fs, and sharp only inside those endpoints.

2. Call the server from your Vite app

```ts
// client
await fetch('/api/story', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ prompt, inspirationImagePaths, pagesPerBook })
})
```

3. Keep secrets on the server

* Put `GEMINI_API_KEY` in a server `.env`.
* Do not reference `process.env` from client code.

Minimal Express server example

```ts
import express from 'express'
import multer from 'multer'
import { generateStoryFromPrompt, generateIllustration } from './server/story'
const app = express()
app.use(express.json())
const upload = multer({ dest: 'uploads/' })

app.post('/api/story', async (req, res) => {
  const { prompt, pagesPerBook = 10 } = req.body
  const story = await generateStoryFromPrompt(prompt, [], pagesPerBook)
  res.json(story)
})

app.post('/api/image', upload.single('ref'), async (req, res) => {
  const { imagePrompt, style } = req.body
  const out = `out/${Date.now()}.jpg`
  await generateIllustration(imagePrompt, out, req.file?.path, style)
  res.json({ path: out })
})

app.listen(5174)
```

If you must keep one repo

* Prevent client bundling of server code. Do not import server files from any file that runs in the browser entry tree.
* Gate accidental usage with a hard check at the top of the server module:

```ts
if (typeof window !== 'undefined') {
  throw new Error('This module runs on the server only')
}
```

Optional Vite tweak for clarity

* Leave the overlay on. It helps surface the real error in the console.
* If you still see “unknown runtime error”, open the browser console. The first error line there is the cause.

Summary

* Move Gemini, fs, sharp to the server.
* Expose APIs.
* Call them from the Vite client.
* Keep the API key server side.
