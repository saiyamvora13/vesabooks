
import { GoogleGenAI, Type, GenerateContentResponse, Modality } from "@google/genai";
import { StoryBook } from "../types";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const storySchema = {
  type: Type.OBJECT,
  properties: {
    title: {
      type: Type.STRING,
      description: "A creative and catchy title for the children's story.",
    },
    author: {
      type: Type.STRING,
      description: "The author's name for the storybook.",
    },
    coverImagePrompt: {
        type: Type.STRING,
        description: "A detailed, descriptive prompt for an AI image generator to create the cover image for the book. This should be a single, compelling scene that represents the entire story's theme and main character."
    },
    pages: {
      type: Type.ARRAY,
      description: "An array of 3 pages for the storybook.",
      items: {
        type: Type.OBJECT,
        properties: {
          pageText: {
            type: Type.STRING,
            description: "The text for one page of the story, between 100 and 150 words. It should be engaging for a child.",
          },
          imagePrompt: {
            type: Type.STRING,
            description: "A detailed, descriptive prompt for an AI image generator to create an illustration for this page. Describe the scene, characters, actions, style, and colors clearly. The style should be consistent with a whimsical, illustrated children's book.",
          },
        },
        required: ["pageText", "imagePrompt"],
      },
    },
  },
  required: ["title", "author", "coverImagePrompt", "pages"],
};

export const generateStoryAndImagePrompts = async (prompt: string, imageParts: any[]): Promise<StoryBook> => {
  const systemInstruction = `You are a creative and whimsical children's storybook author. Your task is to generate a complete 3-page story based on a user's prompt and inspirational images. The story should be suitable for children aged 5-7. You must respond with a JSON object that strictly follows the provided schema. Ensure you create a compelling 'coverImagePrompt' and that the 'pages' array contains exactly 3 elements.`;

  const contents = {
    parts: [
      ...imageParts,
      { text: `Here is the story idea: ${prompt}` },
    ],
  };

  const response: GenerateContentResponse = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: contents,
    config: {
      systemInstruction: systemInstruction,
      responseMimeType: 'application/json',
      responseSchema: storySchema,
    },
  });

  const text = response.text.trim();
  try {
    const parsedJson = JSON.parse(text);
    if (!parsedJson.author) {
        parsedJson.author = "AI Storyteller";
    }
    return parsedJson as StoryBook;
  } catch (e) {
    console.error("Failed to parse JSON from Gemini:", text);
    throw new Error("The AI failed to generate a valid story structure. Please try again with a different prompt.");
  }
};

const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

export const generateImage = async (prompt: string, baseImage: { inlineData: { mimeType: string; data: string } }): Promise<string> => {
  let retries = 3;
  let waitTime = 2000; // Start with a 2-second delay

  while (retries > 0) {
    try {
      const fullPrompt = `${prompt}, in the style of a vibrant and colorful children's book illustration, whimsical and gentle.`;
      
      const contents = {
        parts: [
          baseImage,
          { text: fullPrompt },
        ],
      };

      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: contents,
        config: {
          responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
      });

      if (response.candidates && response.candidates.length > 0) {
        for (const part of response.candidates[0].content.parts) {
          if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            const mimeType = part.inlineData.mimeType;
            return `data:${mimeType};base64,${base64ImageBytes}`;
          }
        }
      }
      
      throw new Error("Image generation failed to return an image part.");

    } catch (error: any) {
      retries--;
      const errorMessage = error.toString();
      
      if (retries > 0 && (errorMessage.includes("429") || errorMessage.includes("RESOURCE_EXHAUSTED"))) {
        console.warn(`Rate limit hit. Retrying in ${waitTime / 1000}s... (${retries} retries left)`);
        await delay(waitTime);
        waitTime *= 2; 
      } else {
        if (errorMessage.includes("429") || errorMessage.includes("RESOURCE_EXHAUSTED") || errorMessage.includes("Quota exceeded")) {
           console.error("Image generation failed due to quota limit.", error);
           throw new Error("You have exceeded your API quota for the day. Please check your plan details and try again tomorrow.");
        }
        console.error("Image generation failed.", error);
        throw new Error("Image generation failed. The AI service may be temporarily unavailable or overloaded.");
      }
    }
  }
  
  throw new Error("Image generation failed after all retries.");
};
